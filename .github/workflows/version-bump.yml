name: Version Bump

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Select version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major



jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Pre-validate CHANGELOG for next version
        id: precheck
        run: |
          set -e
          # Read current version from package.json
          CURRENT=$(node -p "require('./package.json').version")
          TYPE='${{ inputs.release_type }}'
          # Compute next semantic version (supports simple X.Y.Z)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          case "$TYPE" in
            patch) PATCH=$((PATCH+1)); ;;
            minor) MINOR=$((MINOR+1)); PATCH=0; ;;
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0; ;;
            *) echo "::error::Unknown release_type: $TYPE"; exit 1; ;;
          esac
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "CURRENT_VERSION=$CURRENT" >> "$GITHUB_OUTPUT"
          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

          # Require a corresponding heading in CHANGELOG.md
          if ! grep -Eq "^## \\[$NEXT_VERSION\\]" CHANGELOG.md; then
            echo "::error::CHANGELOG.md does not contain heading for version $NEXT_VERSION (expected line starting with: '## [$NEXT_VERSION]')."
            echo "Please add the changelog section before running version-bump."
            exit 1
          fi

      - name: Universal Version Bump
        uses: taj54/universal-version-bump@v0.14.0
        with:
          release_type: ${{ inputs.release_type }}
          git_tag: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read package.json version
        id: pkg
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "PKG_VERSION=$PKG_VERSION" >> "$GITHUB_OUTPUT"

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Ensure tag does not already exist on origin
        run: |
          VERSION="${{ steps.pkg.outputs.PKG_VERSION }}"
          if git ls-remote --tags origin "refs/tags/v$VERSION" | grep -q .; then
            echo "::error::Tag v$VERSION already exists on origin."
            exit 1
          fi

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.pkg.outputs.PKG_VERSION }}"
          git tag -a "v$VERSION" -m "chore(release): v$VERSION"
          git push origin "refs/tags/v$VERSION"
