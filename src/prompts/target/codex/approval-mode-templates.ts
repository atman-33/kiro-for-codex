// Auto-generated from src/prompts/codex/approval-mode-templates.md
// DO NOT EDIT MANUALLY

export const frontmatter = {};

export const content = "# Codex CLI Approval Mode Templates\n\nThis document provides template structures optimized for different Codex CLI approval modes. Each mode requires different prompt structures and interaction patterns for optimal code generation.\n\n## Interactive Mode Templates\n\n### Interactive Mode Characteristics\n- Step-by-step execution with user feedback\n- Clear progress indicators and checkpoints\n- Detailed explanations for each step\n- Opportunity for user input and course correction\n\n### Interactive Spec Creation Template\n```markdown\n# Task: [Task Name] (Interactive Mode)\n\n## Context\n[Clear context with current step indication]\n\n**Current Step**: [X of Y] - [Step Description]\n**Previous Steps Completed**: [List of completed steps]\n**Next Steps**: [Preview of upcoming steps]\n\n## Current Objective\n[Specific, focused objective for this step]\n\n## Expected User Input\n[What input or feedback is expected from the user]\n\n## Implementation Approach\n1. **Step 1**: [Detailed description with rationale]\n   - Action: [Specific action to take]\n   - Expected Result: [What should happen]\n   - Validation: [How to verify success]\n\n2. **Step 2**: [Next step description]\n   - Action: [Specific action to take]\n   - Expected Result: [What should happen]\n   - Validation: [How to verify success]\n\n## Progress Checkpoint\nAfter completing this step, please review:\n- [ ] [Checkpoint 1]\n- [ ] [Checkpoint 2]\n- [ ] [Checkpoint 3]\n\n**Ready to proceed?** [Clear question for user confirmation]\n\n## Next Steps Preview\nOnce this step is approved, we will:\n1. [Next step 1]\n2. [Next step 2]\n3. [Next step 3]\n```\n\n### Interactive Implementation Template\n```markdown\n# Task: Implement [Component Name] (Interactive Mode)\n\n## Current Implementation Step\n**Step [X of Y]**: [Step Description]\n\n## Code to Implement\n```typescript\n// Step-by-step implementation\n[Code block with clear comments explaining each part]\n```\n\n## Explanation\n[Detailed explanation of what this code does and why]\n\n## Testing for This Step\n```typescript\n// Tests specific to this implementation step\n[Test code with explanations]\n```\n\n## Validation Questions\nBefore proceeding, please confirm:\n1. Does this implementation approach look correct?\n2. Are there any concerns with the code structure?\n3. Should we modify anything before continuing?\n\n## Next Implementation Step\nAfter approval, we will implement:\n[Preview of next step]\n```\n\n## Auto-Edit Mode Templates\n\n### Auto-Edit Mode Characteristics\n- Focused, complete implementations\n- Minimal need for clarification\n- Self-contained code changes\n- Clear success criteria\n\n### Auto-Edit Spec Creation Template\n```markdown\n# Task: [Task Name] (Auto-Edit Mode)\n\n## Context\n[Complete context with all necessary information]\n\n## Objective\n[Clear, unambiguous objective]\n\n## Implementation Plan\n[Complete plan with all steps outlined]\n\n## Expected Output\n[Detailed description of expected results]\n\n## Constraints and Requirements\n- [Constraint 1]: [Specific requirement]\n- [Constraint 2]: [Specific requirement]\n- [Constraint 3]: [Specific requirement]\n\n## Success Criteria\n- [ ] [Measurable success criterion 1]\n- [ ] [Measurable success criterion 2]\n- [ ] [Measurable success criterion 3]\n\n## Implementation Details\n[Complete implementation guidance with all necessary details]\n\n## Validation Approach\n[How to validate the implementation is correct]\n```\n\n### Auto-Edit Implementation Template\n```markdown\n# Task: Implement [Component Name] (Auto-Edit Mode)\n\n## Implementation Objective\n[Clear, specific objective]\n\n## Complete Implementation\n```typescript\n// Complete, production-ready implementation\n[Full code implementation with comprehensive error handling]\n```\n\n## Comprehensive Test Suite\n```typescript\n// Complete test coverage\n[Full test implementation covering all scenarios]\n```\n\n## Integration Requirements\n[Specific integration steps and requirements]\n\n## Validation Checklist\n- [ ] Implementation meets all requirements\n- [ ] All tests pass successfully\n- [ ] Integration is seamless\n- [ ] Error handling is comprehensive\n- [ ] Performance meets requirements\n```\n\n## Full-Auto Mode Templates\n\n### Full-Auto Mode Characteristics\n- Complete, comprehensive implementations\n- All edge cases and scenarios covered\n- Production-ready output\n- No user intervention required\n\n### Full-Auto Spec Creation Template\n```markdown\n# Task: [Task Name] (Full-Auto Mode)\n\n## Complete Context\n[Comprehensive context with all background information]\n\n## Comprehensive Objective\n[Complete objective with all requirements and constraints]\n\n## Full Implementation Specification\n[Complete specification covering all aspects]\n\n### Requirements Analysis\n[Complete requirements breakdown]\n\n### Design Specifications\n[Complete design with all components and interfaces]\n\n### Implementation Plan\n[Complete implementation plan with all tasks]\n\n### Testing Strategy\n[Complete testing approach covering all scenarios]\n\n### Error Handling Strategy\n[Complete error handling approach]\n\n### Performance Requirements\n[Complete performance specifications]\n\n### Security Considerations\n[Complete security requirements]\n\n## Complete Success Criteria\n[Comprehensive success criteria covering all aspects]\n\n## Full Validation Framework\n[Complete validation approach for all components]\n```\n\n### Full-Auto Implementation Template\n```markdown\n# Task: Complete Implementation of [Feature Name] (Full-Auto Mode)\n\n## Comprehensive Implementation\n\n### Core Implementation\n```typescript\n// Complete, production-ready implementation\n[Full implementation with all components, error handling, logging, etc.]\n```\n\n### Complete Test Suite\n```typescript\n// Comprehensive test coverage\n[Complete test implementation covering all scenarios, edge cases, error conditions]\n```\n\n### Integration Layer\n```typescript\n// Complete integration implementation\n[Full integration code with existing systems]\n```\n\n### Configuration and Setup\n```typescript\n// Complete configuration\n[All necessary configuration and setup code]\n```\n\n### Documentation\n```markdown\n# Complete documentation\n[Full documentation including API docs, usage examples, troubleshooting]\n```\n\n### Performance Optimization\n```typescript\n// Performance optimizations\n[All performance-related code and optimizations]\n```\n\n### Security Implementation\n```typescript\n// Security measures\n[Complete security implementation including validation, authentication, etc.]\n```\n\n### Monitoring and Logging\n```typescript\n// Monitoring and logging\n[Complete monitoring and logging implementation]\n```\n\n## Validation and Quality Assurance\n[Complete validation covering all aspects of the implementation]\n```\n\n## Mode-Specific Optimization Guidelines\n\n### Interactive Mode Optimization\n- Break complex tasks into digestible steps\n- Provide clear progress indicators\n- Include detailed explanations for each step\n- Enable easy course correction\n- Use clear checkpoint questions\n- Preview next steps to maintain context\n\n### Auto-Edit Mode Optimization\n- Focus on complete, self-contained implementations\n- Minimize ambiguity in requirements\n- Include comprehensive context upfront\n- Provide clear success criteria\n- Structure for efficient execution\n- Minimize need for clarification\n\n### Full-Auto Mode Optimization\n- Provide complete specifications upfront\n- Include all edge cases and scenarios\n- Ensure production-ready output\n- Cover all aspects comprehensively\n- Include complete validation framework\n- Anticipate all possible requirements\n\n## Template Selection Guidelines\n\n### Use Interactive Mode When:\n- User needs to provide input during execution\n- Complex decisions require user judgment\n- Learning or explanation is important\n- Iterative refinement is expected\n- User wants to maintain control over process\n\n### Use Auto-Edit Mode When:\n- Requirements are clear and complete\n- Implementation is straightforward\n- Minimal user intervention is desired\n- Focus is on efficient execution\n- Output quality is more important than explanation\n\n### Use Full-Auto Mode When:\n- Complete automation is required\n- All requirements are fully specified\n- Production-ready output is needed immediately\n- No user intervention is possible\n- Comprehensive coverage is essential\n\n## Best Practices for All Modes\n\n### Common Optimization Principles\n- Use clear, unambiguous language\n- Provide specific, actionable instructions\n- Include comprehensive error handling\n- Structure information hierarchically\n- Use consistent formatting and style\n- Include validation and success criteria\n\n### Code Quality Standards\n- Follow TypeScript best practices\n- Include comprehensive error handling\n- Use descriptive naming conventions\n- Add appropriate documentation\n- Implement proper testing\n- Consider performance implications\n\n### Integration Requirements\n- Follow existing codebase patterns\n- Maintain backward compatibility\n- Update relevant interfaces\n- Consider impact on other components\n- Preserve existing functionality\n- Follow established conventions";

export default {
  frontmatter,
  content
};
