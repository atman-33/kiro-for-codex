This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: webview-ui/src/pages/codex-chat/components/composer.tsx, webview-ui/src/pages/codex-chat/components/message-list.tsx, webview-ui/src/pages/codex-chat/page.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
webview-ui/
  src/
    pages/
      codex-chat/
        components/
          composer.tsx
          message-list.tsx
        page.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="webview-ui/src/pages/codex-chat/components/composer.tsx">
import { useState } from 'react';
import { vscode } from '../../../bridge/vscode';

export function Composer({ onSend, isRunning, onStop }: { onSend?: (text: string, id: string) => void; isRunning?: boolean; onStop?: () => void; }) {
  const [text, setText] = useState('');

  const send = () => {
    const payload = text.trim();
    if (!payload) return;
    const id = Math.random().toString(36).slice(2);
    // Stream execution
    vscode.postMessage({ type: 'codex.chat/runStream', id, text: payload });
    onSend?.(payload, id);
    setText('');
  };

  return (
    <div style={{ display: 'flex', gap: 8, width: '90%' }}>
      <input
        value={text}
        onChange={(e) => setText(e.target.value)}
        onKeyDown={(e) => { if (!isRunning && e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); send(); } }}
        placeholder={isRunning ? 'Running...' : 'Type a message and press Enter'}
        disabled={!!isRunning}
        style={{ flex: 1, padding: '8px 10px', borderRadius: 6, border: '1px solid var(--vscode-editorWidget-border, #555)' }}
      />
      {isRunning ? (
        <button onClick={onStop} style={{ padding: '8px 12px', borderRadius: 6 }}>Stop</button>
      ) : (
        <button onClick={send} style={{ padding: '8px 12px', borderRadius: 6 }}>Send</button>
      )}
    </div>
  );
}
</file>

<file path="webview-ui/src/pages/codex-chat/components/message-list.tsx">
export type Msg = { role: 'user' | 'assistant'; text: string; ts: number; };

export function MessageList({ items }: { items: Msg[]; }) {
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 6, width: '90%' }}>
      {items.map((m, i) => (
        <div key={i} style={{
          alignSelf: m.role === 'user' ? 'flex-end' : 'flex-start',
          background: m.role === 'user' ? 'var(--vscode-button-background)' : 'transparent',
          color: m.role === 'user' ? 'var(--vscode-button-foreground)' : 'inherit',
          border: m.role === 'assistant' ? '1px solid var(--vscode-editorWidget-border, #555)' : 'none',
          padding: '6px 10px',
          borderRadius: 8,
          maxWidth: '80%'
        }}>
          {m.text}
        </div>
      ))}
    </div>
  );
}
</file>

<file path="webview-ui/src/pages/codex-chat/page.tsx">
import { useEffect, useMemo, useReducer, useState } from 'react';
import { vscode } from '../../bridge/vscode';
import { Composer } from './components/composer';
import { MessageList, type Msg } from './components/message-list';

type State = { messages: Msg[]; };
type Action =
  | { type: 'push'; message: Msg; }
  | { type: 'append'; chunk: string; };

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case 'push':
      return { messages: [...state.messages, action.message] };
    case 'append': {
      const msgs = [...state.messages];
      const last = msgs[msgs.length - 1];
      if (last && last.role === 'assistant') {
        msgs[msgs.length - 1] = { ...last, text: last.text + action.chunk };
        return { messages: msgs };
      }
      // if no assistant message yet, create one
      msgs.push({ role: 'assistant', text: action.chunk, ts: Date.now() });
      return { messages: msgs };
    }
    default:
      return state;
  }
}

export function CodexChatPage() {
  const [state, dispatch] = useReducer(reducer, { messages: [] });
  const [running, setRunning] = useState(false);
  const [runId, setRunId] = useState<string | null>(null);

  useEffect(() => {
    const onMessage = (event: MessageEvent) => {
      const data = event.data;
      if (!data || typeof data !== 'object') return;
      if (data.type === 'codex.chat/echoResult') {
        dispatch({ type: 'push', message: { role: 'assistant', text: data.text, ts: data.ts } });
      } else if (data.type === 'codex.chat/chunk') {
        dispatch({ type: 'append', chunk: data.text });
      } else if (data.type === 'codex.chat/complete') {
        // Only append if provider sent a final text (non-streaming fallback)
        if (data.text && data.text.length > 0) {
          dispatch({ type: 'push', message: { role: 'assistant', text: data.text, ts: data.ts } });
        }
        setRunning(false);
      } else if (data.type === 'codex.chat/error') {
        dispatch({ type: 'push', message: { role: 'assistant', text: `Error: ${data.error}`, ts: data.ts } });
        setRunning(false);
      }
    };
    window.addEventListener('message', onMessage);
    return () => window.removeEventListener('message', onMessage);
  }, []);

  const header = useMemo(() => (
    <div style={{ padding: '8px 10px', borderBottom: '1px solid var(--vscode-editorWidget-border, #555)' }}>
      <strong>Codex Chat (Preview)</strong>
    </div>
  ), []);

  return (
    <div style={{ display: 'grid', gridTemplateRows: 'auto 1fr auto', height: '100%', width: '100%', minWidth: 0, minHeight: 0 }}>
      {header}
      <div style={{ padding: 10, overflow: 'auto', minWidth: 0, minHeight: 0 }}>
        <MessageList items={state.messages} />
      </div>
      <div style={{ padding: 10, borderTop: '1px solid var(--vscode-editorWidget-border, #555)' }}>
        <Composer
          isRunning={running}
          onStop={() => {
            vscode.postMessage({ type: 'codex.chat/stop', id: runId ?? 'current' });
            setRunning(false);
            setRunId(null);
          }}
          onSend={(text, id) => {
            dispatch({ type: 'push', message: { role: 'user', text, ts: Date.now() } });
            setRunning(true);
            setRunId(id);
          }}
        />
      </div>
    </div>
  );
}
</file>

</files>
